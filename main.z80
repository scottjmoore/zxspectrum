ROM_CLS         equ $0daf

SCREEN          equ $4000
SCREENSEG0      equ $4000
SCREENSEG1      equ $4800
SCREENSEG2      equ $5000

BUFFERWIDTH     equ 32
BUFFERHEIGHT    equ 24
BUFFERPAD       equ 0
BUFFERLINESIZE  equ (BUFFERWIDTH + (BUFFERPAD << 1))
BUFFERSIZE      equ (BUFFERLINESIZE * (BUFFERHEIGHT + (BUFFERPAD << 1)) << 3)
BUFFERSTART     equ Buffer + BUFFERPAD + ((BUFFERLINESIZE * BUFFERPAD) << 3)

    org $8000
    jp Start

Buffer:
    blk (BUFFERWIDTH + (BUFFERPAD << 1)) * (BUFFERHEIGHT + (BUFFERPAD << 1)) << 3,$55

CopyBufferLine  macro
    ld de,\1 + (\4 << 5) + (0 << 8)
    ld hl,\2 + ((BUFFERLINESIZE * \4) << 3)
    ld bc,\3
    ldir

    ld de,\1 + (\4 << 5) + (1 << 8)
    ld bc,\3
    ldir
    
    ld de,\1 + (\4 << 5) + (2 << 8)
    ld bc,\3
    ldir
    
    ld de,\1 + (\4 << 5) + (3 << 8)
    ld bc,\3
    ldir
    
    ld de,\1 + (\4 << 5) + (4 << 8)
    ld bc,\3
    ldir
    
    ld de,\1 + (\4 << 5) + (5 << 8)
    ld bc,\3
    ldir
    
    ld de,\1 + (\4 << 5) + (6 << 8)
    ld bc,\3
    ldir
    
    ld de,\1 + (\4 << 5) + (7 << 8)
    ld bc,\3
    ldir
    
    endm

CopyBufferToScreen:
    CopyBufferLine SCREENSEG0,BUFFERSTART,BUFFERWIDTH,0
    CopyBufferLine SCREENSEG0,BUFFERSTART,BUFFERWIDTH,1
    CopyBufferLine SCREENSEG0,BUFFERSTART,BUFFERWIDTH,2
    CopyBufferLine SCREENSEG0,BUFFERSTART,BUFFERWIDTH,3
    CopyBufferLine SCREENSEG0,BUFFERSTART,BUFFERWIDTH,4
    CopyBufferLine SCREENSEG0,BUFFERSTART,BUFFERWIDTH,5
    CopyBufferLine SCREENSEG0,BUFFERSTART,BUFFERWIDTH,6
    CopyBufferLine SCREENSEG0,BUFFERSTART,BUFFERWIDTH,7
    CopyBufferLine SCREENSEG1,BUFFERSTART + (BUFFERLINESIZE << 6),BUFFERWIDTH,0
    CopyBufferLine SCREENSEG1,BUFFERSTART + (BUFFERLINESIZE << 6),BUFFERWIDTH,1
    CopyBufferLine SCREENSEG1,BUFFERSTART + (BUFFERLINESIZE << 6),BUFFERWIDTH,2
    CopyBufferLine SCREENSEG1,BUFFERSTART + (BUFFERLINESIZE << 6),BUFFERWIDTH,3
    CopyBufferLine SCREENSEG1,BUFFERSTART + (BUFFERLINESIZE << 6),BUFFERWIDTH,4
    CopyBufferLine SCREENSEG1,BUFFERSTART + (BUFFERLINESIZE << 6),BUFFERWIDTH,5
    CopyBufferLine SCREENSEG1,BUFFERSTART + (BUFFERLINESIZE << 6),BUFFERWIDTH,6
    CopyBufferLine SCREENSEG1,BUFFERSTART + (BUFFERLINESIZE << 6),BUFFERWIDTH,7
    CopyBufferLine SCREENSEG2,BUFFERSTART + (BUFFERLINESIZE << 6),BUFFERWIDTH,0
    CopyBufferLine SCREENSEG2,BUFFERSTART + (BUFFERLINESIZE << 6),BUFFERWIDTH,1
    CopyBufferLine SCREENSEG2,BUFFERSTART + (BUFFERLINESIZE << 6),BUFFERWIDTH,2
    CopyBufferLine SCREENSEG2,BUFFERSTART + (BUFFERLINESIZE << 6),BUFFERWIDTH,3
    CopyBufferLine SCREENSEG2,BUFFERSTART + (BUFFERLINESIZE << 6),BUFFERWIDTH,4
    CopyBufferLine SCREENSEG2,BUFFERSTART + (BUFFERLINESIZE << 6),BUFFERWIDTH,5
    CopyBufferLine SCREENSEG2,BUFFERSTART + (BUFFERLINESIZE << 6),BUFFERWIDTH,6
    CopyBufferLine SCREENSEG2,BUFFERSTART + (BUFFERLINESIZE << 6),BUFFERWIDTH,7

    ret

Start:

    call VSync
    call CopyBufferToScreen

    ld hl,BUFFERSTART
    ld de,TestSprite+1+((0 * 6)*16)
    
    call DrawSprite

    call VSync
    call CopyBufferToScreen

    ld hl,BUFFERSTART
    ld de,TestSprite+1+((1 * 6)*16)
    
    call DrawSprite

    call CopyBufferToScreen

    ld hl,BUFFERSTART
    ld de,TestSprite+1+((2 * 6)*16)
    
    call DrawSprite

    call CopyBufferToScreen

    ld hl,BUFFERSTART
    ld de,TestSprite+1+((3 * 6)*16)
    
    call DrawSprite

    call CopyBufferToScreen

    ld hl,BUFFERSTART
    ld de,TestSprite+1+((4 * 6)*16)
    
    call DrawSprite

    call CopyBufferToScreen

    ld hl,BUFFERSTART
    ld de,TestSprite+1+((5 * 6)*16)
    
    call DrawSprite

    call CopyBufferToScreen

    ld hl,BUFFERSTART
    ld de,TestSprite+1+((6 * 6)*16)
    
    call DrawSprite

    call CopyBufferToScreen

    ld hl,BUFFERSTART
    ld de,TestSprite+1+((7 * 6)*16)
    
    call DrawSprite

    call CopyBufferToScreen

    ld hl,BUFFERSTART+1
    ld de,TestSprite+1+((0 * 6)*16)
    
    call DrawSprite

    call CopyBufferToScreen

    ld hl,BUFFERSTART+1
    ld de,TestSprite+1+((1 * 6)*16)
    
    call DrawSprite

    call CopyBufferToScreen

    ld hl,BUFFERSTART+1
    ld de,TestSprite+1+((2 * 6)*16)
    
    call DrawSprite

    call CopyBufferToScreen

    ld hl,BUFFERSTART+1
    ld de,TestSprite+1+((3 * 6)*16)
    
    call DrawSprite

    call CopyBufferToScreen

    ld hl,BUFFERSTART+1
    ld de,TestSprite+1+((4 * 6)*16)
    
    call DrawSprite

    call CopyBufferToScreen

    ld hl,BUFFERSTART+1
    ld de,TestSprite+1+((5 * 6)*16)
    
    call DrawSprite

    call CopyBufferToScreen

    ld hl,BUFFERSTART+1
    ld de,TestSprite+1+((6 * 6)*16)
    
    call DrawSprite

    call CopyBufferToScreen

    ld hl,BUFFERSTART+1
    ld de,TestSprite+1+((7 * 6)*16)
    
    call DrawSprite

    call CopyBufferToScreen

    ld hl,BUFFERSTART+2
    ld de,TestSprite+1+((0 * 6)*16)
    
    call DrawSprite

    call CopyBufferToScreen

    ld hl,BUFFERSTART+2
    ld de,TestSprite+1+((1 * 6)*16)
    
    call DrawSprite

    call CopyBufferToScreen

    ld hl,BUFFERSTART+2
    ld de,TestSprite+1+((2 * 6)*16)
    
    call DrawSprite

    call CopyBufferToScreen

    ld hl,BUFFERSTART+2
    ld de,TestSprite+1+((3 * 6)*16)
    
    call DrawSprite

    call CopyBufferToScreen

    ld hl,BUFFERSTART+2
    ld de,TestSprite+1+((4 * 6)*16)
    
    call DrawSprite

    call CopyBufferToScreen

    ld hl,BUFFERSTART+2
    ld de,TestSprite+1+((5 * 6)*16)
    
    call DrawSprite

    call CopyBufferToScreen

    ld hl,BUFFERSTART+2
    ld de,TestSprite+1+((6 * 6)*16)
    
    call DrawSprite

    call CopyBufferToScreen

    ld hl,BUFFERSTART+2
    ld de,TestSprite+1+((7 * 6)*16)
    
    call DrawSprite

    jp Start

DrawSprite:
    push hl
    ld a,(de)
    ld (hl),a
    inc de
    inc de
    inc hl
    ld a,(de)
    ld (hl),a
    inc de
    inc de
    inc hl
    ld a,(de)
    ld (hl),a
    inc de
    inc de
    pop hl

    ld bc,BUFFERLINESIZE
    add hl, bc

    push hl
    ld a,(de)
    ld (hl),a
    inc de
    inc de
    inc hl
    ld a,(de)
    ld (hl),a
    inc de
    inc de
    inc hl
    ld a,(de)
    ld (hl),a
    inc de
    inc de
    pop hl

    ld bc,BUFFERLINESIZE
    add hl, bc

    push hl
    ld a,(de)
    ld (hl),a
    inc de
    inc de
    inc hl
    ld a,(de)
    ld (hl),a
    inc de
    inc de
    inc hl
    ld a,(de)
    ld (hl),a
    inc de
    inc de
    pop hl

    ld bc,BUFFERLINESIZE
    add hl, bc

    push hl
    ld a,(de)
    ld (hl),a
    inc de
    inc de
    inc hl
    ld a,(de)
    ld (hl),a
    inc de
    inc de
    inc hl
    ld a,(de)
    ld (hl),a
    inc de
    inc de
    pop hl

    ld bc,BUFFERLINESIZE
    add hl, bc

    push hl
    ld a,(de)
    ld (hl),a
    inc de
    inc de
    inc hl
    ld a,(de)
    ld (hl),a
    inc de
    inc de
    inc hl
    ld a,(de)
    ld (hl),a
    inc de
    inc de
    pop hl

    ld bc,BUFFERLINESIZE
    add hl, bc

    push hl
    ld a,(de)
    ld (hl),a
    inc de
    inc de
    inc hl
    ld a,(de)
    ld (hl),a
    inc de
    inc de
    inc hl
    ld a,(de)
    ld (hl),a
    inc de
    inc de
    pop hl

    ld bc,BUFFERLINESIZE
    add hl, bc

    push hl
    ld a,(de)
    ld (hl),a
    inc de
    inc de
    inc hl
    ld a,(de)
    ld (hl),a
    inc de
    inc de
    inc hl
    ld a,(de)
    ld (hl),a
    inc de
    inc de
    pop hl

    ld bc,BUFFERLINESIZE
    add hl, bc

    push hl
    ld a,(de)
    ld (hl),a
    inc de
    inc de
    inc hl
    ld a,(de)
    ld (hl),a
    inc de
    inc de
    inc hl
    ld a,(de)
    ld (hl),a
    inc de
    inc de
    pop hl

    ld bc,BUFFERLINESIZE
    add hl, bc

    push hl
    ld a,(de)
    ld (hl),a
    inc de
    inc de
    inc hl
    ld a,(de)
    ld (hl),a
    inc de
    inc de
    inc hl
    ld a,(de)
    ld (hl),a
    inc de
    inc de
    pop hl

    ld bc,BUFFERLINESIZE
    add hl, bc

    push hl
    ld a,(de)
    ld (hl),a
    inc de
    inc de
    inc hl
    ld a,(de)
    ld (hl),a
    inc de
    inc de
    inc hl
    ld a,(de)
    ld (hl),a
    inc de
    inc de
    pop hl

    ld bc,BUFFERLINESIZE
    add hl, bc

    push hl
    ld a,(de)
    ld (hl),a
    inc de
    inc de
    inc hl
    ld a,(de)
    ld (hl),a
    inc de
    inc de
    inc hl
    ld a,(de)
    ld (hl),a
    inc de
    inc de
    pop hl

    ld bc,BUFFERLINESIZE
    add hl, bc

    push hl
    ld a,(de)
    ld (hl),a
    inc de
    inc de
    inc hl
    ld a,(de)
    ld (hl),a
    inc de
    inc de
    inc hl
    ld a,(de)
    ld (hl),a
    inc de
    inc de
    pop hl

    ld bc,BUFFERLINESIZE
    add hl, bc

    push hl
    ld a,(de)
    ld (hl),a
    inc de
    inc de
    inc hl
    ld a,(de)
    ld (hl),a
    inc de
    inc de
    inc hl
    ld a,(de)
    ld (hl),a
    inc de
    inc de
    pop hl

    ld bc,BUFFERLINESIZE
    add hl, bc

    push hl
    ld a,(de)
    ld (hl),a
    inc de
    inc de
    inc hl
    ld a,(de)
    ld (hl),a
    inc de
    inc de
    inc hl
    ld a,(de)
    ld (hl),a
    inc de
    inc de
    pop hl

    ld bc,BUFFERLINESIZE
    add hl, bc

    push hl
    ld a,(de)
    ld (hl),a
    inc de
    inc de
    inc hl
    ld a,(de)
    ld (hl),a
    inc de
    inc de
    inc hl
    ld a,(de)
    ld (hl),a
    inc de
    inc de
    pop hl

    ld bc,BUFFERLINESIZE
    add hl, bc

    push hl
    ld a,(de)
    ld (hl),a
    inc de
    inc de
    inc hl
    ld a,(de)
    ld (hl),a
    inc de
    inc de
    inc hl
    ld a,(de)
    ld (hl),a
    inc de
    inc de
    pop hl

    ret

VSync:
    halt
    ret

PrintString:
    push hl
    call PrintStringLoop
    ld hl,Part2+1
    ld a,(hl)
    inc a
    and %111
    cp 0
    jp nz,ColorOkay
    ld a,1
ColorOkay:
    ld (hl),a
    pop hl
    ret

PrintStringLoop:
    ld a,(hl)
    cp 0
    ret z
    inc hl
    rst $10
    jr PrintStringLoop

Message:
Part1:
    db $10,$05,$11,$01,'Retro'
Part2:
    db $10,$01,$11,$05,'arch'
Part3:
    db $10,$02,$11,$04," is still awesome.."
    db 13,0

TestSprite:
    incbin build/test.bin
